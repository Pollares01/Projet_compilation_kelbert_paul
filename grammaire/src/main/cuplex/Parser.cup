/* Grammaire CUP du projet Expression */
package fr.ul.miage.grammaire;
import fr.ul.miage.arbre.*;

/* code java */
parser code {:
    public Noeud resultat = null ;
:}

/* la grammaire */
/* 1) terminaux */
terminal ADD , SUB , MUL , DIV , PO , PF ,
    ENTIER , FONCTION , OUTPUT, INPUT, RETURN, TQ, AFF;
terminal Integer NUM ;

/* 2) non terminaux */
non terminal langage;
non terminal Noeud expression, facteur, atome;

/* AxiomeStart */
start with langage;

/*-------------------------------*/
/* 4) r√®gles de production */
langage ::= expression : e {: resultat = e ; :}
    ;

expression ::= expression : e ADD facteur : f {:
                        RESULT = new Plus();
                        ((Plus)RESULT).setFilsGauche(e) ;
                        ((Plus)RESULT).setFilsDroit(f) ;
                            :}
    | expression : e SUB facteur : f {:
                            RESULT = new Moins();
                            ((Moins)RESULT).setFilsGauche(e);
                            ((Moins)RESULT).setFilsDroit(f);
                        :}
    | facteur : f {: RESULT = f ; :}
    ;

facteur ::= facteur : f MUL atome : a {:
                            RESULT = new Multiplication();
                            ((Multiplication)RESULT).setFilsGauche(f);
                            ((Multiplication)RESULT).setFilsDroit(a);
                        :}
    | facteur : f DIV atome : a {:
                            RESULT = new Division () ;
                            ((Division)RESULT).setFilsGauche(f);
                            ((Division)RESULT).setFilsDroit(a);
                        :}
    | atome : a {: RESULT = a ; :}
    ;

atome ::= NUM : n {: RESULT = new Const(n); :}
    | PO expression : e PF {: RESULT = e; :}
    ;